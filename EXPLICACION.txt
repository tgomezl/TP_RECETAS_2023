>>entidades(POJOS con constructores vacios)
	@Entity
	metodo to view
>>repositorio (interface que extends de JpaRepository<M;N>)
	no lleva ningun arroba
>>service(interface(tiene las firmas) + clase(@autowired al repo))
	sirve para limitar los metodos que se puede usar
	@Service en la clase! 		la interface NO lleva ningun arroba
>>controlador (@autowired al service)
	@Component
>>rest(@autowired al cotrolador)//son los endpoint
	@RestController
	@RequestMapping("/api/usuarios")
	@CrossOrigin(origins = "*")
>>vistas
	no lleva ningun arroba
-----------------------------------------------
FLUJO
el endpoint--->controlador---->service---->repo
----------------------------------------------
ANOTACIONES POR CAPA:
>>ENTIDADES
	@Entity	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	//N a N
	@ManyToMany(cascade = CascadeType.ALL, mappedBy = "actores",fetch = FetchType.EAGER)   
	//1 a N
	@OneToMany(cascade = CascadeType.ALL,fetch = FetchType.EAGER)  //me trae todas las mascotas
	@JsonIgnore     //esto se lo tuve que agregar xq get pelicula---->get actor--->get pelicula (RECURSIVO)

>>REPOSITORIO
public interface PeliculaRepo extends JpaRepository<Pelicula, Integer>
//no lleva anotaciones
//es una interfacfe

>>SERVICE interface
//no lleva ninguna anotacion
//metodos:
public Pelicula save(Pelicula pelicula);
public Optional<Pelicula> FindById(Integer idpeli);
public void Delete(Integer idpeli);
public List<Pelicula> FindAll();

>>SERVICE clase
@Service
@Autowired al repo

>>CONTROLADOR
@Component
@Autowired al service

>>ENDPOINT/REST
@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/peliculas")

@Autowired al controlador

@PostMapping("/{idpelicula}")
public Pelicula crearPelicula(@PathVarible(value="idpelicula") String idpelicula,@RequestBody Pelicula pelicula)

//--------------------------------------------------
>>otros metodos:
isPresent()
.contains()
.equals()
.size()
.isEmpty
==null

